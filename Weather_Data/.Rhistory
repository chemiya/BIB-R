#bucle simulando lo mismo
Chicago
#media para cada fila
output<-NULL
for(i in 1:5){
output[i]<-mean(Chicago[i,])
}
output
#ponemos nombres
names(output)<-rownames(Chicago)
output
t(Chicago)
newlist<-lapply(weather,t)
newlist
lapply(weather,rbind,NewRow=1:12)
?lapply
#media de cada fila
rowMeans(Chicago)
weather
lapply(weather,rowMeans)
#acceder elemento
weather[[1]][1]
lapply(weather,"[",1,1)
lapply(weather,"[",1,)
lapply(weather,"[",,3)
lapply(weather,"[",1,)
lapply(weather,"[",1,1)#primer valor primera fila
lapply(weather,function(x) x[1,])
lapply(weather,function(x) x[,12])
lapply(weather,function(z) z[1,]-z[2,])
#acceso elemento
lapply(weather,"[",1,7)
#lo convierte en matriz
sapply(weather,"[",1,7)
lapply(weather,"[",1,10:12)
sapply(weather,"[",1,10:12)
lapply(weather,"[",1,10:12)#primera fila, columnas 10 a 12
sapply(weather,"[",1,10:12)
lapply(weather,rowMeans)
round(sapply(weather,rowMeans),2)
sapply(weather,function(z) round((z[1,]-z[2,])/z[2,],2))
sapply(weather,rowMeans,simplify=FALSE)
lapply(weather,apply,1,max)
lapply(weather,function(x) apply(x,1,max))
sapply(weather,apply,1,max)
names(which.max(Chicago[1,]))
apply(Chicago,1,function(x) names(which.max(x)))
lapply(weather,function(y) apply(y,1,function(x) names(which.max(x))))
sapply(weather,function(y) apply(y,1,function(x) names(which.max(x))))
library(datasets)
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
cylinders <- table(mtcars$cyl)
cylinders
barplot(cylinders)
head(mtcars)
mi_vector <- c(10, 20, 30, 40, "a")#vector: todos del mismo tipo
mi_vector
mi_lista <- list(nombre = "Juan", edad = 30, notas = c(85, 90, 75))
mi_lista
mi_vector <- c(10, 20, 30, 40, "a")#vector
mi_lista <- list(nombre = "Juan", edad = 30, notas = c(85, 90, 75))#lista
#int
n1 <- 15
typeof(n1)
#double
n2 <- 1.5
#caracter
c1 <- "c"
#string
c2 <- "a string of text"
#boolean
l1 <- TRUE
l2 <- F
#vector
v1 <- c(1, 2, 3, 4, 5)
is.vector(v1)
#matriz
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
#array
# (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
# Data frame
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)
dfa
dfa1 <- rbind(vNumeric, vCharacter, vLogical)
dfa1
dfa <- cbind(vNumeric, vCharacter, vLogical)#une en columnas->1acolumna: 1,2,3
dfa1 <- rbind(vNumeric, vCharacter, vLogical)#une en filas->1afila: 1,2,3
df <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
#vector
v1 <- c(1, 2, 3, 4, 5)
is.vector(v1)
#matriz
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
a1 <- array(c( 1:24), c(4, 3, 2))
a1
#lista
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
list1 <- list(o1, o2, o3)
list2 <- list(o1, o2, o3, list1)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce5 <- as.numeric(c("1", "2", "3")))
typeof(coerce5)
#matriz a dataframe
(coerce6 <- matrix(1:9, nrow= 3))
is.matrix(coerce6)
(coerce7 <- as.data.frame(matrix(1:9, nrow= 3)))
is.data.frame(coerce7)
library(datasets)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(pacman, psych)
head(iris)
# Get info on package
p_help(psych)           # Opens package PDF in browser
p_help(psych, web = F)  # Opens help in R Viewer
head(iris)
describe(iris$Sepal.Length)
#todo el dataframe
describe(iris)
x1 <- 0:10
x2 <- 10:0
(x3 <- seq(10))
(x4 <- seq(30, 0, by = -3))
#scan
x6 <- scan()
#rep
x7 <- rep(TRUE, 5)
x8 <- rep(c(TRUE, FALSE), 5)
(x1 <- 1:3)
(y  <- 1:9)
(df1 <- cbind.data.frame(x1, y))
typeof(df1$x1)
(x2  <- as.factor(c(1:3)))
(df2 <- cbind.data.frame(x2, y))
x4  <- c(1:3)
df4 <- cbind.data.frame(x4, y)
df4$x4 <- factor(df4$x4,
levels = c(1, 2, 3),
labels = c("macOS", "Windows", "Linux"))
df4
x3  <- c(1:3)
df3 <- cbind.data.frame(x3, y)
(df3$x3 <- factor(df3$x3,
levels = c(1, 2, 3)))
df3
x4  <- c(1:3)
df4 <- cbind.data.frame(x4, y)
df4$x4 <- factor(df4$x4,
levels = c(1, 2, 3),
labels = c("macOS", "Windows", "Linux"))
df4
x5  <- c(1:3)
df5 <- cbind.data.frame(x5, y)
(df5$x5 <- ordered(df5$x5,
levels = c(3, 1, 2),
labels = c("No", "Maybe", "Yes")))
df5
library(datasets)
?mtcars
head(mtcars)
#seleccionamos variables
cars <- mtcars[, c(1:4, 6:7, 9:11)]
head(cars)
hc <- cars   %>%
dist   %>%
hclust
library(dplyr)
hc <- cars   %>%
dist   %>%
hclust
plot(hc)
#añadir colores
rect.hclust(hc, k = 2, border = "gray")
plot(hc)
library(datasets)
?mtcars
head(mtcars)
#seleccionamos variables
cars <- mtcars[, c(1:4, 6:7, 9:11)]
head(cars)
library(dplyr)
hc <- cars   %>%
dist   %>%
hclust
plot(hc)
#añadir colores
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
plot(hc)
plot(hc, col = c("red", "blue"))
library(datasets)
?mtcars
head(mtcars)
#seleccionamos variables
cars <- mtcars[, c(1:4, 6:7, 9:11)]
head(cars)
library(dplyr)
hc <- cars   %>%
dist   %>%
hclust
plot(hc)
#añadir colores
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
library(datasets)
#cargamos iris
?iris
head(iris)
hist(iris$Sepal.Length)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
library(datasets)
#cargamos iris
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
par(mfrow = c(1, 1))
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
library(datasets)
#cargamos iris
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# poner graficos en 3 filas y una columna
par(mfrow = c(3, 1))
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
par(mfrow = c(1, 1))
library(datasets)
# CSV
rio_csv <- import("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\mbb.csv")
# CSV
rio_csv <- read.csv("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\mbb.csv")
# CSV
rio_csv <- read.csv("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\ImportingData_Datasets\\mbb.csv")
head(rio_csv)
# TXT
rio_txt <- read.csv("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\ImportingData_Datasets\\mbb.txt")
head(rio_txt)
# TXT
rio_txt <- read.csv("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\ImportingData_Datasets\\mbb.txt", sep = "\t")
head(rio_txt)
# Excel XLSX
rio_xlsx <- read_excel("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\ImportingData_Datasets\\mbb.xlsx")
# Excel XLSX
library(readxl)
rio_xlsx <- read_excel("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\ImportingData_Datasets\\mbb.xlsx")
head(rio_xlsx)
View(rio_csv)
r_txt1 <- read.table("C:\\Users\\jmlozanoo\\Documents\\GitHub\\BIB-R\\yt\\yt-exer\\ImportingData_Datasets\\mbb.txt", header = TRUE,
sep = "\t")
r_txt1
library(datasets)
head(lynx)
hist(lynx)
hist(lynx,
breaks = 14,
freq   = FALSE,
col    = "thistle1",
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Distribucion normal, superpuesto anterior grafico
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(lynx, adjust = 3), col = "purple", lwd = 2)
# Add a rug plot
rug(lynx, lwd = 2, col = "gray")
head(iris)
plot(iris$Species)  # variable categorica
plot(iris$Petal.Length)  # variable cuantitativa
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris$Petal.Length, iris$Petal.Width)  # de puntos
plot(iris)  # Entire data frame
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",
pch = 19,
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
# Formula plot with options
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
library(datasets)
head(mtcars)
#seleccionar variables
cars <- mtcars[, c(1:4, 6:7, 9:11)]
head(cars)
pc <- prcomp(cars,
center = TRUE,
scale = TRUE)
pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
center = TRUE,
scale = TRUE)
summary(pc)
plot(pc)
# Get standard deviations and rotation
pc
pc
predict(pc) %>% round(2)
library(datasets)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
#columnas menos la 12
x <- as.matrix(data[, -12])
#columna 12
y <- data[, 12]
#regresion
reg1 <- lm(y ~ x)
#especificando variables
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# resultados
reg1
summary(reg1)
#otros datos
anova(reg1)
coef(reg1)
confint(reg1)
resid(reg1)
hist(residuals(reg1))
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
install.packages("lars")
library(lars)
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Stagewise: stepwise pero con mejor generalizacion
forward <- lars(x, y, type = "forward.stagewise")
# LAR
lar <- lars(x, y, type = "lar")
# LASSO
lasso <- lars(x, y, type = "lasso")
# comparar los r2, cogiendolos y redondeando
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>%
round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp
library(datasets)
?mtcars
head(mtcars)
hist(mtcars$wt)
hist(mtcars$mpg)
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$mpg,
pch = 19,
cex = 1.5,
col = "#cc0000",
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
head(iris)
#descripcion de los datos
hist(iris$Petal.Length)
summary(iris$Petal.Length)
summary(iris$Species)
# solo con este tipo
hist(iris$Petal.Length[iris$Species == "versicolor"],
main = "Petal Length: Versicolor")
# solo con estos petalos
hist(iris$Petal.Length[iris$Petal.Length < 2],
main = "Petal Length < 2")
#con ambas condiciones
hist(iris$Petal.Length[iris$Species == "virginica" &
iris$Petal.Length < 5.5],
main = "Petal Length: Short Virginica")
#subconjunto
i.setosa <- iris[iris$Species == "setosa", ]
#ver sus datos
head(i.setosa)
summary(i.setosa$Petal.Length)
hist(i.setosa$Petal.Length)
# solo con estos petalos
hist(iris$Petal.Length[iris$Petal.Length < 2],
main = "Petal Length < 2")
#subconjunto
i.setosa <- iris[iris$Species == "setosa", ]
#ver sus datos
head(i.setosa)
summary(i.setosa$Petal.Length)
hist(i.setosa$Petal.Length)
hist(i.setosa$Petal.Length)
#con ambas condiciones
hist(iris$Petal.Length[iris$Species == "virginica" &
iris$Petal.Length < 5.5],
main = "Petal Length: Short Virginica")
